"""
Django settings for pong project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# todo mypyが型対応していない3rdパーティのライブラリも型対応できるようにする
import environ  # type: ignore
from django.core.exceptions import ImproperlyConfigured

# Environment variables

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .envファイルを探し、読み込む
env_file = Path(BASE_DIR) / ".env"
environ.Env.read_env(env_file)


def get_valid_str_env(key: str) -> str:
    """
    環境変数をstrとして取得し、値が不正な場合はエラーを発生させる

    Returns:
        str: 取得した環境変数の値

    Raises:
        ImproperlyConfigured: .envに環境変数が設定されていないまたは空文字列の場合
    """
    # 環境変数の取得に失敗/存在しない場合、env.str()はImproperlyConfiguredを発生させる
    value: str = env.str(key)
    if not value:
        # 空文字列の場合
        raise ImproperlyConfigured(f"Set the {key} environment variable")
    return value


# NOTE: django内で使う環境変数を追加する際は、以下も一緒に行ったか確認する
#   - .env.exampleに追加
#   - .envに追加
#   - Notionの.env共有を更新
#   - github actions用
#     - githubサイトのSettings/Secrets and variablesに追加
#     - .github/workflows/backend_code_check.ymlのenvに追加
#     - .github/workflows/backend_unit_test.ymlのCreate .env fileに追加
# 使用する環境変数を全て取得
DB_NAME = get_valid_str_env("DB_NAME")
DB_USER = get_valid_str_env("DB_USER")
DB_PASSWORD = get_valid_str_env("DB_PASSWORD")
OAUTH2_CLIENT_ID = get_valid_str_env("OAUTH2_CLIENT_ID")
OAUTH2_CLIENT_SECRET_KEY = get_valid_str_env("OAUTH2_CLIENT_SECRET_KEY")
PONG_ORIGIN = get_valid_str_env("PONG_ORIGIN")
OAUTH2_AUTHORIZATION_ENDPOINT = get_valid_str_env(
    "OAUTH2_AUTHORIZATION_ENDPOINT"
)
OAUTH2_TOKEN_ENDPOINT = get_valid_str_env("OAUTH2_TOKEN_ENDPOINT")
JWS_SECRET_KEY = get_valid_str_env("JWS_SECRET_KEY")
FRONT_SERVER_PORT = get_valid_str_env("FRONT_SERVER_PORT")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

DEBUG = env.bool("DEBUG", False)

SECRET_KEY = get_valid_str_env("SECRET_KEY")

ALLOWED_HOSTS: list[str] = []

# Application definition

INSTALLED_APPS = [
    "daphne",  # for django channels
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party apps
    "rest_framework",
    "drf_spectacular",  # for Swagger UI
    "drf_spectacular_sidecar",  # for Swagger UI
    "channels",
    "corsheaders",  # for CORS
    # apps
    # todo: jwt完成後、simple-jwtを削除
    "simple_jwt",
    "tmp_jwt",
    "oauth2",
    "accounts",
    "users",
    "ws",
    "tournaments",
]

MIDDLEWARE = [
    # corsheaders: なるべく上に配置する。特にCommonMiddlewareなどのresponseを生成するミドルウェアの前に配置する必要がある
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pong.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pong.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": "db",  # compose.yamlのDBのservice名
        "PORT": "5432",  # postgresのデフォルトポート
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST framework
# https://drf-spectacular.readthedocs.io/en/latest/readme.html

REST_FRAMEWORK = {
    # view setやserializerから自動的にOpenAPI3.0スキーマを生成
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # djangorestframework_simplejwt
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SPECTACULAR_SETTINGS = {
    # drf_spectacular
    "TITLE": "Pong API",
    "DESCRIPTION": "The Pong API provides backend services for the Pong game.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": True,  # スキーマのendpointを有効にする
    # drf_spectacular_sidecar
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    # djangorestframework_simplejwt
    "AUTHENTICATION_WHITELIST": [
        "rest_framework_simplejwt.authentication.JWTAuthentication"
    ],
}


# Django Channels
# https://channels.readthedocs.io/en/latest/#

CHANNEL_LAYERS = {
    # TODO: 必要になったらchannel_redisを利用する
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

ASGI_APPLICATION = "pong.asgi.application"


# Django CORS headers
# https://github.com/adamchainz/django-cors-headers

# リストに追加することでオリジンを許可する
CORS_ALLOWED_ORIGINS = [
    f"http://localhost:{FRONT_SERVER_PORT}",  # frontendコンテナ
]
# todo: CORS_ALLOW_CREDENTIALS, CSRFについての設定は必要になり次第追加

# Django logging
# 詳細: https://docs.djangoproject.com/ja/5.1/topics/logging/
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "custom": {
            # (例) 2025-01-22 15:06:40 - tmp_jwt.jws - DEBUG - Signature verification failed.
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        # todo: ログレベルの設定は必要に応じて追加する
        "warning": {
            "level": "WARNING",
            "class": "logging.StreamHandler",
            "formatter": "custom",
        },
        # todo: fileにログを出力する場合は追加する
    },
    # todo: アプリごとにログレベルを設定する場合は追加する
    # 詳細: https://docs.python.org/ja/3/library/logging.config.html#dictionary-schema-details
    "root": {
        "handlers": ["warning"],
        # todo: DEBUGがTrueの場合はDEBUGレベルのログを出力するようにする？
        "level": "WARNING",
    },
}
